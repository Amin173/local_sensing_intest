<?xml version="1.0" encoding="UTF-8"?>

<launch>

    <arg name="rejection_threshold" default="0.8"/>

    <node pkg="robot_localization" type="ekf_localization_node"
          name="robot_localization_ekf_node_map"
          clear_params="true">

        <param name="frequency" value="10"/>
        <param name="sensor_timeout" value="0.1"/>
        <param name="two_d_mode" value="true"/>
        <param name="publish_tf" value="true"/>
        <param name="map_frame" value="map"/>
        <param name="odom_frame" value="odom"/>
        <param name="base_link_frame" value="bot00_analyt"/>
        <param name="world_frame" value="map"/>
        <remap from="odometry/filtered" to="odometry/filtered_map"/>

        <rosparam param="initial_state">[1.62996120803, 0.898038998129, 0.0,
            0.0, 0.0, 1.4646557375302942,
            0.0, 0.0, 0.0,
            0.0, 0.0, 0.0,
            0.0, 0.0, 0.0]
        </rosparam>

        <param name="odom0" value="odom/vel_model"/>
        <param name="odom0_nodelay" value="true"/>
        <param name="odom0_queue_size" value="10"/>
        <param name="odom0_differential" value="true"/>
        <rosparam param="odom0_config">
            [true, true, false, false, false, true,
            false, false, false, false, false, false,
            false, false, false]
        </rosparam>

        <param name="odom1" value="odom/vel_model"/>
        <param name="odom1_differential" value="false"/>
        <rosparam param="odom1_config">
            [false, false, false, false, false, true,
            false, false, false, false, false, false,
            false, false, false]
        </rosparam>

        <param name="pose0" value="amcl_pose"/>
        <param name="pose0_differential" value="false"/>
        <rosparam param="pose0_config">
            [true, true, false, false, false, true,
            false, false, false, false, false, false,
            false, false, false]
        </rosparam>

<!--        <param name="pose1" value="pose/ground_truth"/>-->
<!--        <param name="pose1_differential" value="false"/>-->
<!--        <rosparam param="pose1_config">-->
<!--            [false, false, false, false, false, true,-->
<!--            false, false, false, false, false, false,-->
<!--            false, false, false]-->
<!--        </rosparam>-->

<!--        <param name="pose0" value="point_cloud_pose_est"/>-->
<!--        <param name="pose0_differential" value="false"/>-->
<!--        <rosparam param="pose0_config">-->
<!--            [true, true, false, false, false, false,-->
<!--            false, false, false, false, false, false,-->
<!--            false, false, false]-->
<!--        </rosparam>-->



        <!--        # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is-->
        <!--# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each-->
        <!--# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.-->
        <!--# However, if users find that a given variable is slow to converge, one approach is to increase the-->
        <!--# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error-->
        <!--# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are-->
        <!--# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if-->
        <!--# unspecified.-->
        <rosparam param="process_noise_covariance">
            [0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0.55, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0.55, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.015]
        </rosparam>

        <!--        # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal-->
        <!--# value (variance) to a large value will result in rapid convergence for initial measurements of the variable in-->
        <!--# question. Users should take care not to use large values for variables that will not be measured directly. The values-->
        <!--# are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below-->
        <!--#if unspecified.-->
        <rosparam param="initial_estimate_covariance">
            [1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9]
        </rosparam>


    </node>


</launch>
